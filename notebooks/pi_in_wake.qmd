---
title: Photoinhibition of Gamma Bandpower During Wake
format:
  pdf:
    toc: true
jupyter: python3
---

```{python}
%matplotlib widget
%reload_ext autoreload
%autoreload 2

import numpy as np
import pandas as pd
import tdt
from pathlib import Path
import matplotlib.pyplot as plt
import seaborn as sns
import yaml
import xarray as xr

import kdephys.hypno as kh
import kdephys.pd as kpd
import kdephys.xr as kx
import kdephys.utils as ku
import kdephys.ssfm as ss

import acr.subjects as subs
import acr
import plotly.express as px
import plotly.io as pio
```

```{python}
a4_info = {}
a4_info["subject"] = "ACR_4"
a4_info["complete_key_list"] = ["control1-sd", "laser1-sd"]
a4_info["paths"] = acr.io.get_acr_paths(a4_info["subject"], a4_info["complete_key_list"])
a4_info["times"] = {}

a4_info["load_times"] = {}
a4_info["load_times"]["control1-sd"] = (0, 18000)
a4_info["load_times"]["laser1-sd"] = (0, 18000)
a4_info["channels"] = {}
a4_info["channels"]["EEGr"] = [1, 2, 3, 4]
a4_info["channels"]["EMGr"] = [1, 2, 3, 4]
```

```{python}
d, s, b = acr.io.acr_load_master(a4_info, stores=["EEGr"], hyp=False)
```

```{python}
class data_dict(dict):
    def __init__(self, dict):
        self._dict = dict

    def __getattr__(self, attr):
        if attr in self.__dict__:
            return getattr(self, attr)
        return getattr(self._dict, attr)

    def __getitem__(self, item):
        return self._dict[item]

    def __setitem__(self, item, data):
        self._dict[item] = data

    def __repr__(self):
        return repr(self._dict)

    def __len__(self):
        return len(self._dict)

    def mush(self):
         df_list = []
         for k in self._dict.keys():
            df_list.append(self._dict[k])
         return pd.concat(df_list)
```

```{python}
bb = data_dict(b)
```

```{python}
bp = bb.mush()
```

We'll look at two of ACR_4's SD experiments. Both were 5 hours, but in one the laser was on continuously, delivering photoinhibition, near EEG channels 2 and 4. 

Channels 1 and 3 were contralateral to the channels near the photoinhibition site:

![](ref/acr4_schematic.png)

```{python}
# toss the outliers:
out = np.percentile(bp.low_gamma.values, 99)
bp = bp[bp.low_gamma < out]
```

Gamma bandpower distributions over the entire 5-hr SD:

```{python}
px.histogram(bp, x='low_gamma', color='condition', color_discrete_sequence=['black', 'royalblue'], marginal='box', barmode='overlay', facet_col='channel', facet_col_wrap=1)
```

Gamma bandpower over the entire 5-hr SD:

```{python}
px.line(bp, x="time", y="low_gamma", color="condition", facet_row="channel", width=1800, height=1200, color_discrete_sequence=['black', 'royalblue'])
```

Smoothing out each channel and looking at it over time:

```{python}
pio.templates.default = "plotly_white"
```

Channel-1:

```{python}
px.line(bp.ch(1).sm('low_gamma', sigma=10), x="time", y="low_gamma_smooth", color="condition", width=1800, height=600, color_discrete_sequence=['black', 'royalblue'])
```

Channel-2:

```{python}
px.line(bp.ch(2).sm('low_gamma', sigma=10), x="time", y="low_gamma_smooth", color="condition", width=1800, height=600, color_discrete_sequence=['black', 'royalblue'])
```

Channel-3:

```{python}
px.line(bp.ch(3).sm('low_gamma', sigma=10), x="time", y="low_gamma_smooth", color="condition", width=1800, height=600, color_discrete_sequence=['black', 'royalblue'])
```

Channel-4:

```{python}
px.line(bp.ch(4).sm('low_gamma', sigma=10), x="time", y="low_gamma_smooth", color="condition", width=1800, height=600, color_discrete_sequence=['black', 'royalblue'])
```